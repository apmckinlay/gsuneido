// Copyright (C) 2015 Suneido Software Corp. All rights reserved worldwide.
Test
	{
	cases: (
		('a',			'a')
		('A',			'global("A")')
		('_d',			'dynget("_d")')
		('d?',			'd_Q')
		('a',			'a')
		('this',		'this')
		('a.b',			'get(a, "b")')
		('a.b.c',		'get(get(a, "b"), "c")')
		('a[b]',		'get(a, b)')
		('a[b][c]',		'get(get(a, b), c)')
		('.a',			'get(this, "a")')
		('a + b',		'add(a, b)')
		('a = 5',		'a = 5')
		('a? = 5',		'a_Q = 5')
		('_d = 5',		'dynset("_d", 5)')

		('a.b = 5',		'put(a, "b", 5)')
		('a.b.c = 5',	'put(get(a, "b"), "c", 5)')
		('a[b] = 5',	'put(a, b, 5)')
		('a[b][c] = 5',	'put(get(a, b), c, 5)')
		('a *= 5',		'a = mul(a, 5)')
		('++a',			'a = inc(a)')
		('a--',			'(a = dec($tmp0 = a)), $tmp0')
		('b is a++',	'is(b, ((a = inc($tmp0 = a)), $tmp0))')
		('a[i++]',		'get(a, ((i = inc($tmp0 = i)), $tmp0))')
		('not a',		'! toBool(a)')
		('~ a',			'bitnot(a)')
		('+ a',			'uadd(a)')
		('- a',			'usub(a)')
		('a + b',		'add(a, b)')
		('a + b - c',	'sub(add(a, b), c)')
		('-a - b - c',	'sub(sub(usub(a), b), c)')
		('a - b',		'sub(a, b)')
		('a $ b',		'cat(a, b)')
		('a $ "-" $ c',	'cat(cat(a, "-"), c)')
		('a $= "x"',	'a = cat(a, "x")')
		('a * b',		'mul(a, b)')
		('a / b',		'div(a, b)')
		('a / b * c / d',	'div(mul(div(a, b), c), d)')
		('a % b',		'mod(a, b)')
		('a << b',		'lshift(a, b)')
		('a >> b',		'rshift(a, b)')
		('a ^ b',		'bitxor(a, b)')
		('a & b',		'bitand(a, b)')
		('a | b',		'bitor(a, b)')
		('a < b',		'lt(a, b)')
		('a <= b',		'lte(a, b)')
		('a > b',		'gt(a, b)')
		('a >= b',		'gte(a, b)')
		('a is b',		'is(a, b)')
		('a isnt b',	'isnt(a, b)')
		('a =~ b',		'match(a, b)')
		('a !~ b',		'matchnot(a, b)')
		('a and b',		'toBool(a) && toBool(b)')
		('a or b or c',	'toBool(a) || toBool(b) || toBool(c)')
		('a < b or c > d',	'(lt(a, b)) || (gt(c, d))')
		('(a or b) and (c or d)', '(toBool(a) || toBool(b)) && (toBool(c) || toBool(d))')
		('not (a and b)' '! (toBool(a) && toBool(b))')
		('a in (1,2,3)',	'-1 != [1, 2, 3].indexOf(a)')
		('a ? i++ : ++i', 	'toBool(a) ? ((i = inc($tmp0 = i)), $tmp0) : (i = inc(i))')
		('a[1..10]',	'rangeto(a, 1, 10)')
		('a[..]',		'rangeto(a, 0, 536870888)')
		('a[1::10]',	'rangelen(a, 1, 10)')
		('a[::]',		'rangelen(a, 0, 536870888)')

		('fn(@args)'	'callAt(fn, args, 0)')
		('fn(@+1args)'	'callAt(fn, args, 1)')
		('fn(@args?)'	'callAt(fn, args_Q, 0)')
		('fn()'			'call(fn)')
		('fn(a?)'		'call(fn, a_Q)')
		('fn(1, 2)'		'call(fn, 1, 2)')
		('fn(1, 2, c: 3)'
						'callNamed(fn, {"c": 3, }, 1, 2)')
		('fn(1, 2, c: 3, 4: "a", 5: 5)',		'callNamed(fn, ' $
			'($tmp0 = new Map([[4, "a"], [5, 5], ]), $tmp0.c = 3, $tmp0), 1, 2)')
		('fn(1, i++)',	'call(fn, 1, ((i = inc($tmp0 = i)), $tmp0))')
		('fn(a, a?, :b?)'	'callNamed(fn, {"b?": b_Q, }, a, a_Q)')

		('[]',				'call(global("Record"))')
		('[a: 1]',			'callNamed(global("Record"), {"a": 1, })')
		('[1, 2]',			'call(global("Object"), 1, 2)')
		('[1, a: 1]',		'callNamed(global("Object"), {"a": 1, }, 1)')

		('a.b(1, 2)',	'invoke(a, "b", 1, 2)')
		('a[b](1, 2)', 	'invoke(a, b, 1, 2)')
		('a.b(@args)',	'invokeAt(a, "b", args, 0)')
		('a.b(@+1args)',	'invokeAt(a, "b", args, 1)')

		('new C(1, 2)',		'instantiate(global("C"), 1, 2)')
		('new C(1, b: 2)',	'instantiateNamed(global("C"), {"b": 2, }, 1)')
		('new C(@args)',	'instantiateAt(global("C"), args, 0)')
		('new C(@+1args)',	'instantiateAt(global("C"), args, 1)')

		('super.Fn(1, 2)', 	'invokeBySuper($super, "Fn", this, 1, 2)')
		('super.Fn(@args)', 'invokeAtBySuper($super, "Fn", this, args, 0)')
		('super.Fn(@+1args)', 'invokeAtBySuper($super, "Fn", this, args, 1)')
		)
	Test_one()
		{
		for c in .cases
			.test(c[0], c[1])
		}
	test(src, expected)
		{
		dst = JsTranslate('function () {\n' $ src $ '\n}')
		dst = dst.Replace('try { su.dynpush\(\);\n')
		lines = dst.Lines()
		i = 1 + lines.Find("    let $f = function () {") + 1
		if lines[i].Has?(' var ')
			++i
		dst = lines[i].Trim().Replace('^return ').Replace(';$').Replace('su\.')
		Assert(dst is: expected)
		}
	}
