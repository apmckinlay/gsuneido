// Copyright (C) 2025 Axon Development Corporation All rights reserved worldwide.
SuJsTester
	{
	// run on client, called by the cmd generated by RunContinuousTest
	CallClass()
		{
		// to avoid conflicting with the timeout tester
		// the init of the timeout tester (minimize all windows) causes
		// "undefined" web errors
		Thread.Sleep(30000/*=30secs*/)
		Timestamp() // keep alive
		Thread.Sleep(30000/*=30secs*/)
		.Start('WebTest', id: 'sujswebtest_done')
		}

	ExtraRoutes: #(
		['GET',		'/WebTest$',			'SuJsWebTester.Page'],
		['GET',		'/WebTestCodeBundle',	'SuJsWebTester.CodeBundle'])

	Setup() // called by RunContinuousTest on server
		{
		try
			{
			for fn in Contributions('SuJsWebTester_ExtraSetup')
				fn()
			}
		catch (e)
			SuneidoLog(e)

		.RunSuJsHttpServer()
		}

	Page(env)
		{
		codeBundleUrl = '/WebTestCodeBundle?date=' $ Date().Format("yyyyMMddHHmmss")
		return .BasePage(env, 'RunSuJsWebTest', codeBundleUrl)
		}

	CodeBundle(env/*unused*/)
		{
		extraSeeds = .GetTests().Members().Add('RunSuJsWebTestClient')
		return SuCode.BuildCodeBundle(:extraSeeds).code
		}

	GetTests()
		{
		tests = Object()
		for lib in Libraries()
			{
			TestRunner.ForeachTest(lib)
				{ |name, x|
				if x.text.Has?('// SuJsWebTest')
					{
					excludeMethods = Object()
					if x.text.Has?('// SuJsWebTest Excluded')
						{
						for range in ClassHelp.MethodRanges(x.text)
							{
							if x.text[range.from..range.to].
								Has?('// SuJsWebTest Excluded')
								excludeMethods.Add(range.name)
							}
						}
					tests[name] = excludeMethods
					}
				}
			}
		return tests
		}
	}