// Copyright Suneido Software Corp. All rights reserved.
// Governed by the MIT license found in the LICENSE file.

package query

import (
	. "github.com/apmckinlay/gsuneido/core"
	"github.com/apmckinlay/gsuneido/util/str"
)

// Nothing is a null query that produces no output.
// It results from a Join, Where, or Intersect with a Fixed conflict.
// It is not generated by the query parser.
type Nothing struct {
	queryBase
	table string
	tran  QueryTran
}

func NewNothing(q Query) *Nothing {
	no := Nothing{table: q.Updateable()}
	no.header = q.Header()
	return &no
}

var _ Query = (*Nothing)(nil)

func (no *Nothing) String() string {
	return "NOTHING" + str.Opt("(", no.table, ")")
}

func (no *Nothing) Transform() Query {
	return no
}

func (*Nothing) Keys() [][]string {
	return [][]string{{}}
}

func (*Nothing) Indexes() [][]string {
	return nil
}

func (*Nothing) Nrows() (int, int) {
	return 0, 0
}

func (*Nothing) rowSize() int {
	return 0
}

func (*Nothing) fastSingle() bool {
	return true
}

func (no *Nothing) Updateable() string {
	return no.table
}

func (*Nothing) SingleTable() bool {
	return true
}

func (no *Nothing) SetTran(tran QueryTran) {
	no.tran = tran
}

func (*Nothing) optimize(Mode, []string, float64) (Cost, Cost, any) {
	return 0, 0, nil
}

func (no *Nothing) setApproach(_ []string, _ float64, _ any, tran QueryTran) {
	no.tran = tran
}

func (*Nothing) lookupCost() Cost {
	return 0
}

func (*Nothing) Lookup(*Thread, []string, []string) Row {
	return nil
}

func (no *Nothing) Output(th *Thread, rec Record) {
	no.tran.Output(th, no.table, rec)
}

func (*Nothing) Get(*Thread, Dir) Row {
	return nil
}

func (*Nothing) Rewind() {
}

func (*Nothing) Select([]string, []string) {
}

func (*Nothing) Simple(*Thread) []Row {
	return nil
}

func (*Nothing) hash() Qhash {
	return Qhash{143, 56, 99, 174, 152, 108, 230, 206, 72, 28, 153, 37, 43,
		113, 20, 144, 207, 227, 223, 83}
}
